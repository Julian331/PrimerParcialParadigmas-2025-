#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef unsigned long long ull; //Factos grandes
#define MAX_MEMO 1000 
ull memo[MAX_MEMO] = {0};  // Memoizaci√≥n para factorial recursivo

//Obtener tiempo preciso
double get_time() {               
    struct timespec ts;
    clock_gettime(CLOCK_MONOTONIC, &ts);
    return ts.tv_sec + (ts.tv_nsec / 1e9);
}


unsigned long long factorial_iterativo(int n) { 
    ull resultado = 1;
    for (int i = 1; i <= n; i++) {
        resultado *= i;
    }
    return resultado;
}

//Con memoizacion
unsigned long long factorial_recursivo(int n) {
    if (n == 0 || n == 1) return 1;
    if (memo[n] != 0) return memo[n];  //si ya fue calculado
    return memo[n] = n * factorial_recursivo(n - 1);
}

//tiempo del metodo iterativo
double medir_tiempo_iterativo(int n, unsigned long long *resultado) {
    double inicio = get_time();
    *resultado = factorial_iterativo(n);
    double fin = get_time();
    return fin - inicio;
}

//tiempo del metodo recursivo
double medir_tiempo_recursivo(int n, unsigned long long *resultado) {
    double inicio = get_time();
    *resultado = factorial_recursivo(n);
    double fin = get_time();
    return fin - inicio;
}

//GNUPLOT
//se generan los archibo de datos y el script para gnuplot
//10 decimales
void generar_datos(double tiempo_iter, double tiempo_rec) {
    FILE *archivo = fopen("datos_factorial.txt", "w"); 
    if (!archivo) {
        printf("Error al abrir el archivo de datos.\n");
        return;
    }
    fprintf(archivo, "# Metodo Tiempo\n");
    fprintf(archivo, "\"Iterativo\" %.10Lf \n", (long double) tiempo_iter); 
    fprintf(archivo, "\"Recursivo\" %.10Lf \n", (long double) tiempo_rec);
    fclose(archivo);
}

//script para GNUPLOT
void generar_script_gnuplot() {
    FILE *archivo = fopen("grafica_factorial.gp", "w");
    if (!archivo) {
        printf("Error al crear el script de GNUPLOT.\n");
        return;
    }
    //Histograma
    fprintf(archivo,
        "set terminal windows\n"
        "set title 'Tiempo de Ejecucion de Factorial'\n"
        "set xlabel 'Metodo'\n"
        "set ylabel 'Tiempo de Ejecucion (s)'\n"
        "set yrange [0:*]\n" // No valores negativos en Y
        "set format y '%%.10f'\n"
        "set style data histograms\n"
        "set style fill solid border -1\n"
        "set grid\n" 
        "set boxwidth 0.5 relative\n"
        "set style histogram clustered gap 1\n"
        "set style line 1 lc rgb '#1f77b4' lt 1 \n"  // Azul Iterativo
        "set style line 2 lc rgb '#ff0000' lt 1 \n"  // Rojo Recursivo
        "plot 'datos_factorial.txt' using 2:xtic(1) title 'Iterativo' with histogram ls 1, \\\n" //Columam2Y, Columna1X
        "     '' using 2:xtic(1) title 'Recursivo' with histogram ls 2\n"

        "pause -1 'Enter para salir'\n" //Mk no ve que se cierra esa joa
    );
    fclose(archivo);
}


int main() {
    int n;
    unsigned long long resultado_iter, resultado_rec;
    
    printf("Ingrese un numero para calcular el factorial: ");
    
    // Por si esta pillo el user 
    if (scanf("%d", &n) != 1 || n < 0) {
        printf("Ingrese un entero positivo!!\n");
        return 1;
    }

    if (n > 1000) {
        printf("Factoriales mayores a 1000 pueden causar overflow y tiempos de ejecucion extremadamente largos.\n");
        return 1;
    }

    double tiempo_iter = medir_tiempo_iterativo(n, &resultado_iter); 
    double tiempo_rec = medir_tiempo_recursivo(n, &resultado_rec);
    //Especificador
    printf("RESULTADOS\n");

    printf("Factorial de %d (Iterativo): %llu\n", n, resultado_iter);
    printf("Tiempo de ejecucion (Iterativo): %.10Lf s\n", (long double) tiempo_iter);
    printf("Factorial de %d (Recursivo): %llu\n", n, resultado_rec);
    printf("Tiempo de ejecucion (Recursivo): %.10Lf s\n", (long double) tiempo_rec);
    printf("Metodo mas rapido: %s\n", (tiempo_iter < tiempo_rec) ? "Iterativo" : "Recursivo");

    generar_datos(tiempo_iter, tiempo_rec);
    generar_script_gnuplot(resultado_iter, resultado_rec);
    
    system("gnuplot -persist grafica_factorial.gp"); // Grafica

    return 0;
}
